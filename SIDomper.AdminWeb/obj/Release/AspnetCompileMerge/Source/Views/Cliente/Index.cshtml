@model SIDomper.Dominio.ViewModel.ClienteViewModel

@{
    ViewBag.Title = "Clientes";
}

@Html.AntiForgeryToken()

<div class="row">
    <div class="col-xs-12">
        <div class="box box-default">
            <div class="box-body">
                @using (Html.BeginForm("Index", "Cliente", FormMethod.Post, new { @class = "form-inline" }))
                {
                    <div class="form-group">
                        <label>Campos</label>
                        @Html.DropDownListFor(n => n.Campo, new SelectList(Model.Campos, "Campo", "Descricao"), new { @class = "form-control texto-grande" })
                    </div>
                    <div class="form-group">
                        <label>Pesquisar</label>
                        @Html.TextBoxFor(model => model.Texto, new { @class = "form-control" })
                    </div>
                    <div class="form-group">
                        <button type="submit" class="btn btn-primary" id="btn-Pesquisar">Pesquisar</button>
                    </div>
                }
            </div>

            @*<p id="demo">Clique no botão para obter sua localização:</p>
                <button onclick="getLocation()">Clique aqui</button>
                <div id="mapholder"></div>*@
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <div class="box box-default">
            <div class="box-body">
                <table class="table table-striped table-responsive table-hover">
                    <tr>
                        <th class="hidden-xs">
                            <label class="control-label"> @Html.DisplayNameFor(model => model.Id) </label>
                        </th>
                        <th>
                            <label class="control-label"> @Html.DisplayNameFor(model => model.Razao) </label>
                        </th>
                        <th class="hidden-xs">
                            <label class="control-label"> @Html.DisplayNameFor(model => model.Documento) </label>
                        </th>
                        <th>
                            <label class="control-label"> @Html.DisplayNameFor(model => model.Telefone) </label>
                        </th>
                        <th class="hidden-xs">
                            <label class="control-label"> @Html.DisplayNameFor(model => model.NomeConsultor) </label>
                        </th>
                        <th></th>
                    </tr>
                    @foreach (var item in Model.Clientes)
                    {
                        <tr>
                            <td class="hidden-xs">
                                @item.Id
                            </td>
                            <td>
                                @item.Razao
                            </td>
                            <td class="hidden-xs">
                                @item.Documento
                            </td>
                            <td>
                                @item.Telefone
                            </td>
                            <td class="hidden-xs">
                                @item.NomeConsultor
                            </td>
                            <td>
                                @Html.ActionLink("Detalhes", "Editar", new { id = item.Id }, new { @class = "control-label col-md-6 btn btn-primary" })
                                @Html.ActionLink("Visita", "Novo", "Visita", new { id = item.Id }, new { @class = "control-label col-md-6 btn btn-default" })
                                @*@Html.ActionLink("Visita", "Novo", "Visita", new { id = item.Id }, null)*@

                            </td>
                        </tr>
                    }
                </table>
            </div>
        </div>
    </div>

</div>
@*<script src="http://maps.google.com/maps/api/js?sensor=false"></script>
    <script>
        var x = document.getElementById("demo");
        function getLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(showPosition, showError);
            }
            else { x.innerHTML = "Geolocalização não é suportada nesse browser."; }
        }

        function showPosition(position) {
            lat = position.coords.latitude;
            lon = position.coords.longitude;

            alert('Latitude: ' + lat + ' Longitude: ' + lon);
            document.getElementById('Texto').value = lat + ' long: ' + lon;

            return false;

            latlon = new google.maps.LatLng(lat, lon)
            mapholder = document.getElementById('mapholder')
            mapholder.style.height = '250px';
            mapholder.style.width = '500px';

            var myOptions = {
                center: latlon, zoom: 14,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                mapTypeControl: false,
                navigationControlOptions: { style: google.maps.NavigationControlStyle.SMALL }
            };
            var map = new google.maps.Map(document.getElementById("mapholder"), myOptions);
            var marker = new google.maps.Marker({ position: latlon, map: map, title: "Você está Aqui!" });
        }

        function showError(error) {
            switch (error.code) {
                case error.PERMISSION_DENIED:
                    x.innerHTML = "Usuário rejeitou a solicitação de Geolocalização."
                    break;
                case error.POSITION_UNAVAILABLE:
                    x.innerHTML = "Localização indisponível."
                    break;
                case error.TIMEOUT:
                    x.innerHTML = "O tempo da requisição expirou."
                    break;
                case error.UNKNOWN_ERROR:
                    x.innerHTML = "Algum erro desconhecido aconteceu."
                    break;
            }
        }
    </script>*@